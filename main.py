# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'clock.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton
from PyQt5.QtWidgets import QVBoxLayout, QLabel
from PyQt5.QtGui import QFont, QIcon
from PyQt5.QtCore import QTimer, QTime, Qt


try:
    # Включите в блок try/except, если вы также нацелены на Mac/Linux
    from PyQt5.QtWinExtras import QtWin

    myappid = 'mycompany.myproduct.subproduct.version'
    QtWin.setCurrentProcessExplicitAppUserModelID(myappid)
except ImportError:
    pass


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setWindowIcon(QtGui.QIcon('icon.png'))
        MainWindow.setStyleSheet("background - color: rgba(200, 200, 100, 50)")
        MainWindow.setWindowFlags(Qt.WindowStaysOnTopHint | Qt.Tool)
        # MainWindow.setWindowFlags(Qt.FramelessWindowHint)
        MainWindow.setAttribute(Qt.WA_TranslucentBackground)
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(400, 300)
        self.MainWindow = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.calendarWidget = QtWidgets.QCalendarWidget(self.centralwidget)
        self.calendarWidget.setGeometry(QtCore.QRect(0, 0, 400, 200))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.calendarWidget.setFont(font)
        self.calendarWidget.setStyleSheet("background-color: rgba(255, 255, 255, 0);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(0, 0, 0, 0), stop:1 rgba(255, 255, 255, 0));\n"
"alternate-background-color: rgb(161, 161, 161);\n"
"color: rgb(255, 255, 255);")
        self.calendarWidget.setObjectName("calendarWidget")

        # отсюда начала впихивать
        font1 = QFont('Arial', 20, QFont.Bold)
        self.label = QtWidgets.QLabel(MainWindow)
        # adding label to the layout
        self.label.setGeometry(12, 220, 400, 60)
        self.label.setStyleSheet("font: 50px; font: bold; color: #FFFFFF")
        self.label.show()

        self.btn_exit = QPushButton("Exit", MainWindow)
        self.btn_exit.setGeometry(310, 255, 75, 30)
        self.btn_exit.setStyleSheet("background-color: #CCCCCC; font: 18px")
        self.btn_exit.clicked.connect(exit)

        self.btn_hide_show = QPushButton("Hide", MainWindow)
        self.btn_hide_show.setGeometry(310, 215, 75, 30)
        self.btn_hide_show.setStyleSheet("background-color: #CCCCCC; font: 18px")
        self.btn_hide_show.clicked.connect(self.hide_calendar)

        self.btn_w = QPushButton("White", MainWindow)
        self.btn_w.setGeometry(215, 255, 75, 30)
        self.btn_w.setStyleSheet("background-color: #CCCCCC; font: 18px")
        self.btn_w.clicked.connect(self.w)

        self.btn_b = QPushButton("Black", MainWindow)
        self.btn_b.setGeometry(215, 215, 75, 30)
        self.btn_b.setStyleSheet("background-color: #CCCCCC; font: 18px")
        self.btn_b.clicked.connect(self.b)

        # setting the layout to main window

        # creating a timer object
        timer = QTimer(MainWindow)

        # adding action to timer
        timer.timeout.connect(self.showTime)

        # update the timer every second
        timer.start(1000)

        self.current_time = QTimer(self)
        self.current_time.timeout.connect(self.update)
        self.current_time.start(1000)  # Обновление времени каждую секунду

    # method called by timer
    def showTime(self):
        # getting current time
        current_time = QTime.currentTime()

        # converting QTime object to string
        label_time = current_time.toString('hh:mm:ss')

        # showing it to the label
        self.label.setText(label_time)

        self.timeEdit = QtWidgets.QTimeEdit(self.centralwidget)
        self.timeEdit.setGeometry(QtCore.QRect(0, 200, 400, 110))
        font = QtGui.QFont()
        font.setFamily("Sitka Display")
        font.setPointSize(72)
        self.timeEdit.setFont(font)
        self.timeEdit.setStyleSheet("background-color: rgb(93, 93, 93);\n"
"background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:1, y2:1, stop:0 rgba(255, 255, 255, 108), stop:1 rgba(0, 0, 0, 0));\n"
"color: rgb(0, 0, 0);")
        self.timeEdit.setObjectName("timeEdit")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "календарь и часики"))

    def show_calendar(self):
        self.calendarWidget.show()
        self.label.move(12, 220)
        self.btn_exit.move(310, 255)
        self.btn_hide_show.move(310, 215)
        self.MainWindow.resize(400, 300)
        self.btn_b.move(215, 215)
        self.btn_w.move(215, 255)

        self.btn_hide_show.setText("Hide")
        self.btn_hide_show.clicked.connect(self.hide_calendar)

    def hide_calendar(self):
        self.calendarWidget.hide()
        self.label.move(12, 20)
        self.btn_exit.move(310, 55)
        self.btn_hide_show.move(310, 15)
        self.MainWindow.resize(400, 100)
        self.btn_b.move(215, 15)
        self.btn_w.move(215, 55)

        self.btn_hide_show.setText("Show")
        self.btn_hide_show.clicked.connect(self.show_calendar)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.old_pos = event.pos()

    def mouseReleaseEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.old_pos = None

    def mouseMoveEvent(self, event):
        if not self.old_pos:
            return

        delta = event.pos() - self.old_pos
        self.move(self.pos() + delta)

    def w(self):
        self.label.setStyleSheet("font: 50px; font: bold; color: #FFFFFF")

    def b(self):
        self.label.setStyleSheet("font: 50px; font: bold; color: #000000")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setWindowIcon(QtGui.QIcon('icon.png'))
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())